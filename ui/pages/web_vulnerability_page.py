"""
Web vulnerability scanner page for Astra
"""

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit,
                            QProgressBar, QTableWidget, QTableWidgetItem, QGroupBox, QFormLayout,
                            QHeaderView, QCheckBox, QMessageBox, QSizePolicy)
from PyQt6.QtCore import Qt, QThread, QSize
from PyQt6.QtGui import QFont, QColor, QResizeEvent, QDragEnterEvent, QDropEvent

from core.web_vulnerability import WebVulnerabilityScanner
from utils.report_generator import ReportGenerator

class ScannerThread(QThread):
    """Thread for running web vulnerability scanner without blocking GUI"""
    
    def __init__(self, scanner, url):
        super().__init__()
        self.scanner = scanner
        self.url = url
    
    def run(self):
        """Run the scanner in a thread"""
        self.scanner.scan(self.url)

class WebVulnerabilityPage(QWidget):
    """Web vulnerability scanner page widget"""
    
    def __init__(self):
        super().__init__()
        self.scanner = WebVulnerabilityScanner()
        self.thread = None
        self.report_generator = ReportGenerator()
        self.scan_results = []  # Store scan results for reporting
        self.setup_ui()
        self.connect_signals()
        self.setAcceptDrops(True)  # Enable drag and drop
    
    def setup_ui(self):
        """Setup the UI components"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(20)
        
        # Header
        header_label = QLabel("Web Vulnerability Scanner")
        header_label.setFont(QFont("Arial", 24, QFont.Weight.Bold))
        layout.addWidget(header_label)
        
        # Description
        desc_label = QLabel("Scan websites for common vulnerabilities")
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        # Input form
        input_group = QGroupBox("Scan Parameters")
        input_group.setSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Maximum)
        input_layout = QFormLayout(input_group)
        
        # URL input
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("Enter URL (e.g., https://example.com)")
        input_layout.addRow("URL:", self.url_input)
        
        # Options
        options_layout = QVBoxLayout()
        
        # Checkboxes for scan options
        self.thorough_check = QCheckBox("Thorough Scan (Slower)")
        self.xss_check = QCheckBox("Check for XSS Vulnerabilities")
        self.sqli_check = QCheckBox("Check for SQL Injection")
        self.header_check = QCheckBox("Check Security Headers")
        self.info_check = QCheckBox("Check for Information Disclosure")
        
        # Default selections
        self.thorough_check.setChecked(False)
        self.xss_check.setChecked(True)
        self.sqli_check.setChecked(True)
        self.header_check.setChecked(True)
        self.info_check.setChecked(True)
        
        options_layout.addWidget(self.thorough_check)
        options_layout.addWidget(self.xss_check)
        options_layout.addWidget(self.sqli_check)
        options_layout.addWidget(self.header_check)
        options_layout.addWidget(self.info_check)
        
        input_layout.addRow("Options:", options_layout)
        layout.addWidget(input_group)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        layout.addWidget(self.progress_bar)
        
        # Button layout
        button_layout = QHBoxLayout()
        self.scan_button = QPushButton("Start Scan")
        self.scan_button.setFixedWidth(150)
        self.stop_button = QPushButton("Stop")
        self.stop_button.setFixedWidth(150)
        self.stop_button.setEnabled(False)
        self.clear_button = QPushButton("Clear Results")
        self.clear_button.setFixedWidth(150)
        
        # Report generation buttons
        self.generate_pdf_button = QPushButton("Generate PDF Report")
        self.generate_pdf_button.setFixedWidth(200)
        self.generate_pdf_button.setEnabled(False)
        
        self.generate_html_button = QPushButton("Generate HTML Report")
        self.generate_html_button.setFixedWidth(200)
        self.generate_html_button.setEnabled(False)
        
        button_layout.addWidget(self.scan_button)
        button_layout.addWidget(self.stop_button)
        button_layout.addWidget(self.clear_button)
        button_layout.addWidget(self.generate_pdf_button)
        button_layout.addWidget(self.generate_html_button)
        button_layout.addStretch()
        
        layout.addLayout(button_layout)
        
        # Results table
        self.results_table = QTableWidget(0, 4)
        self.results_table.setHorizontalHeaderLabels(["Vulnerability", "URL", "Description", "Severity"])
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.results_table.verticalHeader().setVisible(False)
        self.results_table.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        
        layout.addWidget(self.results_table)
        
        # Status label
        self.status_label = QLabel("Enter a URL to scan for vulnerabilities")
        self.status_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.status_label)
        
    def connect_signals(self):
        """Connect signals to slots"""
        self.scan_button.clicked.connect(self.start_scan)
        self.stop_button.clicked.connect(self.stop_scan)
        self.clear_button.clicked.connect(self.clear_results)
        self.generate_pdf_button.clicked.connect(self.generate_pdf_report)
        self.generate_html_button.clicked.connect(self.generate_html_report)
        
        # Connect scanner signals
        self.scanner.progress_update.connect(self.update_progress)
        self.scanner.result_update.connect(self.update_result)
        self.scanner.scan_completed.connect(self.scan_finished)
        self.scanner.scan_error.connect(self.show_error)
    
    def start_scan(self):
        """Start the web vulnerability scanning process"""
        # Clear previous results if any exist
        if self.results_table.rowCount() > 0:
            self.clear_results()
        
        # Get parameters
        url = self.url_input.text().strip()
        if not url:
            self.show_error("Please enter a URL")
            return
        
        # Validate URL format
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
            self.url_input.setText(url)
        
        # Set scan options
        self.scanner.set_scan_options(
            thorough=self.thorough_check.isChecked(),
            check_xss=self.xss_check.isChecked(),
            check_sqli=self.sqli_check.isChecked(),
            check_headers=self.header_check.isChecked(),
            check_info=self.info_check.isChecked()
        )
        
        # Update UI
        self.scan_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.clear_button.setEnabled(False)
        self.generate_pdf_button.setEnabled(False)
        self.generate_html_button.setEnabled(False)
        self.progress_bar.setValue(0)
        self.status_label.setText(f"Scanning {url}...")
        
        # Start scanning in a thread
        self.thread = ScannerThread(
            self.scanner,
            url
        )
        self.thread.start()
    
    def stop_scan(self):
        """Stop the scanning process"""
        if self.thread and self.thread.isRunning():
            self.scanner.stop_scan()
            self.thread.wait()
            self.scan_finished()
    
    def clear_results(self):
        """Clear the results table and reset progress"""
        self.results_table.setRowCount(0)
        self.progress_bar.setValue(0)
        self.scan_results = []
        self.generate_pdf_button.setEnabled(False)
        self.generate_html_button.setEnabled(False)
        self.status_label.setText("Results cleared")
    
    def update_progress(self, value):
        """Update the progress bar"""
        self.progress_bar.setValue(value)
    
    def update_result(self, vulnerability, url, description, severity):
        """Update the results table with a new scan result"""
        row = self.results_table.rowCount()
        self.results_table.insertRow(row)
        
        # Vulnerability
        vuln_item = QTableWidgetItem(vulnerability)
        self.results_table.setItem(row, 0, vuln_item)
        
        # URL
        url_item = QTableWidgetItem(url)
        self.results_table.setItem(row, 1, url_item)
        
        # Description
        desc_item = QTableWidgetItem(description)
        self.results_table.setItem(row, 2, desc_item)
        
        # Severity
        severity_item = QTableWidgetItem(severity)
        
        # Set color based on severity
        if severity == "High":
            severity_item.setForeground(QColor(200, 0, 0))  # Red
        elif severity == "Medium":
            severity_item.setForeground(QColor(230, 126, 0))  # Orange
        else:  # Low
            severity_item.setForeground(QColor(0, 119, 0))  # Green
            
        self.results_table.setItem(row, 3, severity_item)
        
        # Store the result for reporting
        self.scan_results.append((vulnerability, url, description, severity))
    
    def scan_finished(self):
        """Handle scan completion"""
        self.scan_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.clear_button.setEnabled(True)
        
        # Enable report generation if we have results
        if self.results_table.rowCount() > 0:
            self.generate_pdf_button.setEnabled(True)
            self.generate_html_button.setEnabled(True)
            self.status_label.setText(f"Scan completed. Found {self.results_table.rowCount()} issues.")
        else:
            self.status_label.setText("Scan completed. No issues found.")
    
    def show_error(self, message):
        """Display an error message"""
        QMessageBox.critical(self, "Error", message)
        self.scan_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.clear_button.setEnabled(True)
        self.status_label.setText(f"Error: {message}")
    
    def generate_pdf_report(self):
        """Generate a PDF report from scan results"""
        if not self.scan_results:
            self.show_error("No scan results to report")
            return
            
        url = self.url_input.text().strip()
        try:
            filepath = self.report_generator.generate_pdf_report(
                "Web Vulnerability Scan Results",
                self.scan_results,
                "Web Vulnerability Scan",
                url
            )
            QMessageBox.information(
                self, 
                "Report Generated", 
                f"PDF Report has been saved to:\n{filepath}"
            )
        except Exception as e:
            self.show_error(f"Error generating PDF report: {str(e)}")
    
    def generate_html_report(self):
        """Generate an HTML report from scan results"""
        if not self.scan_results:
            self.show_error("No scan results to report")
            return
            
        url = self.url_input.text().strip()
        try:
            filepath = self.report_generator.generate_html_report(
                "Web Vulnerability Scan Results",
                self.scan_results,
                "Web Vulnerability Scan",
                url
            )
            QMessageBox.information(
                self, 
                "Report Generated", 
                f"HTML Report has been saved to:\n{filepath}"
            )
        except Exception as e:
            self.show_error(f"Error generating HTML report: {str(e)}")
    
    def dragEnterEvent(self, event: QDragEnterEvent):
        """Handle drag enter event for file drops"""
        if event.mimeData().hasUrls():
            # Accept only .txt files
            if event.mimeData().urls()[0].toLocalFile().endswith('.txt'):
                event.acceptProposedAction()
    
    def dropEvent(self, event: QDropEvent):
        """Handle drop event for URL list files"""
        file_path = event.mimeData().urls()[0].toLocalFile()
        try:
            with open(file_path, 'r') as f:
                urls = [line.strip() for line in f if line.strip()]
            
            if urls:
                # Take the first URL from the list
                self.url_input.setText(urls[0])
                if len(urls) > 1:
                    self.status_label.setText(f"Loaded 1 of {len(urls)} URLs from file")
                    
                    # Ask if user wants to scan all URLs
                    reply = QMessageBox.question(
                        self, 
                        "Multiple URLs", 
                        f"File contains {len(urls)} URLs. Do you want to scan them all?",
                        QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                    )
                    
                    if reply == QMessageBox.StandardButton.Yes:
                        # TODO: Implement batch scanning functionality
                        self.status_label.setText(f"Batch scanning not yet implemented")
            else:
                self.status_label.setText("No valid URLs found in file")
        except Exception as e:
            self.status_label.setText(f"Error loading file: {str(e)}")
    
    def resizeEvent(self, event: QResizeEvent):
        """Handle resize events to adjust the UI layout"""
        super().resizeEvent(event)
        
        # Adjust column widths based on available space
        width = self.results_table.width()
        if width > 200:  # Only adjust if we have enough space
            self.results_table.setColumnWidth(0, int(width * 0.2))  # Vulnerability column
            self.results_table.setColumnWidth(1, int(width * 0.2))  # URL column
            self.results_table.setColumnWidth(2, int(width * 0.5))  # Description column
            self.results_table.setColumnWidth(3, int(width * 0.1))  # Severity column
        
        # Adjust button layout based on window width
        if self.width() < 1000:
            self.scan_button.setFixedWidth(120)
            self.stop_button.setFixedWidth(120)
            self.clear_button.setFixedWidth(120)
            self.generate_pdf_button.setFixedWidth(150)
            self.generate_html_button.setFixedWidth(150)
        else:
            self.scan_button.setFixedWidth(150)
            self.stop_button.setFixedWidth(150)
            self.clear_button.setFixedWidth(150)
            self.generate_pdf_button.setFixedWidth(200)
            self.generate_html_button.setFixedWidth(200)
