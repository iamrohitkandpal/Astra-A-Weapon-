"""
Report generation utilities for Astra
"""

import os
from datetime import datetime
from pathlib import Path
import random
import string

# For PDF generation
try:
    from reportlab.lib.pagesizes import letter
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

# For HTML generation
try:
    import dominate
    from dominate.tags import *
    DOMINATE_AVAILABLE = True
except ImportError:
    DOMINATE_AVAILABLE = False

class ReportGenerator:
    """Generate PDF and HTML reports from scan results"""
    
    def __init__(self, report_dir=None):
        """Initialize the report generator"""
        if report_dir:
            self.report_dir = Path(report_dir)
        else:
            self.report_dir = Path("reports")
        
        # Create reports directory if it doesn't exist
        self.report_dir.mkdir(parents=True, exist_ok=True)
    
    def generate_pdf_report(self, title, data, scan_type, target):
        """Generate a PDF report"""
        if not REPORTLAB_AVAILABLE:
            raise ImportError("reportlab is required for PDF generation")
        
        # Create a unique filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))
        filename = f"{scan_type.lower().replace(' ', '_')}_{timestamp}_{random_suffix}.pdf"
        filepath = self.report_dir / filename
        
        # Create the PDF document
        doc = SimpleDocTemplate(str(filepath), pagesize=letter)
        styles = getSampleStyleSheet()
        elements = []
        
        # Add title
        elements.append(Paragraph(title, styles['Title']))
        elements.append(Spacer(1, 12))
        
        # Add scan information
        elements.append(Paragraph(f"Target: {target}", styles['Heading2']))
        elements.append(Paragraph(f"Scan Type: {scan_type}", styles['Heading2']))
        elements.append(Paragraph(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Heading2']))
        elements.append(Spacer(1, 12))
        
        # Add scan results table
        if data:
            # Convert data to table format
            if isinstance(data[0], (list, tuple)):
                # Data is already in table format
                table_data = [["#", *[str(cell) for cell in data[0]]]]  # Header row
                for i, row in enumerate(data):
                    table_data.append([str(i+1), *[str(cell) for cell in row]])
            else:
                # Data is a list of items
                table_data = [["#", "Result"]]  # Header row
                for i, item in enumerate(data):
                    table_data.append([str(i+1), str(item)])
            
            # Create the table
            table = Table(table_data)
            
            # Style the table
            style = TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (0, -1), 'CENTER'),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
            ])
            
            # Apply alternating row colors
            for i in range(1, len(table_data)):
                if i % 2 == 0:
                    style.add('BACKGROUND', (0, i), (-1, i), colors.white)
            
            table.setStyle(style)
            elements.append(table)
        else:
            elements.append(Paragraph("No results found.", styles['Normal']))
        
        # Add footer
        elements.append(Spacer(1, 20))
        elements.append(Paragraph("Generated by Astra Ethical Hacking Toolkit", styles['Normal']))
        
        # Build the PDF
        doc.build(elements)
        
        return str(filepath)
    
    def generate_html_report(self, title, data, scan_type, target):
        """Generate an HTML report"""
        if not DOMINATE_AVAILABLE:
            raise ImportError("dominate is required for HTML generation")
        
        # Create a unique filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        random_suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))
        filename = f"{scan_type.lower().replace(' ', '_')}_{timestamp}_{random_suffix}.html"
        filepath = self.report_dir / filename
        
        # Create the HTML document
        doc = dominate.document(title=title)
        
        # Add styles
        with doc.head:
            style("""
                body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                .container { max-width: 1000px; margin: 0 auto; background-color: white; padding: 20px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
                h1 { color: #0078d7; text-align: center; }
                h2 { color: #444; }
                .info { margin-bottom: 20px; }
                table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                th { background-color: #0078d7; color: white; padding: 10px; text-align: left; }
                td { padding: 8px; border-bottom: 1px solid #ddd; }
                tr:nth-child(even) { background-color: #f2f2f2; }
                tr:hover { background-color: #e6f2ff; }
                .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #777; }
                .note { font-style: italic; color: #666; }
            """)
        
        # Build the HTML content
        with doc:
            with div(cls='container'):
                h1(title)
                
                with div(cls='info'):
                    h2("Scan Information")
                    p(f"Target: {target}")
                    p(f"Scan Type: {scan_type}")
                    p(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                h2("Scan Results")
                
                if data:
                    # Create the table
                    with table():
                        with tr():
                            th("#")
                            # If data is in table format, use first row as headers
                            if isinstance(data[0], (list, tuple)):
                                for header in data[0]:
                                    th(str(header))
                            else:
                                th("Result")
                        
                        # Add data rows
                        if isinstance(data[0], (list, tuple)):
                            # Skip the header row in data (already used for table headers)
                            for i, row in enumerate(data):
                                with tr():
                                    td(str(i+1))
                                    for cell in row:
                                        td(str(cell))
                        else:
                            # Data is a list of items
                            for i, item in enumerate(data):
                                with tr():
                                    td(str(i+1))
                                    td(str(item))
                else:
                    p("No results found.", cls='note')
                
                with div(cls='footer'):
                    p("Generated by Astra Ethical Hacking Toolkit")
        
        # Write the HTML file
        with open(filepath, 'w') as f:
            f.write(doc.render())
        
        return str(filepath)
